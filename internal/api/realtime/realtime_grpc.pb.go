// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: api/proto/realtime.proto

package realtime

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RealTimeClient is the client API for RealTime service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RealTimeClient interface {
	Publish(ctx context.Context, in *PublishMessage, opts ...grpc.CallOption) (*empty.Empty, error)
	Subscribe(ctx context.Context, in *Channel, opts ...grpc.CallOption) (RealTime_SubscribeClient, error)
}

type realTimeClient struct {
	cc grpc.ClientConnInterface
}

func NewRealTimeClient(cc grpc.ClientConnInterface) RealTimeClient {
	return &realTimeClient{cc}
}

func (c *realTimeClient) Publish(ctx context.Context, in *PublishMessage, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/realtime.RealTime/Publish", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *realTimeClient) Subscribe(ctx context.Context, in *Channel, opts ...grpc.CallOption) (RealTime_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &RealTime_ServiceDesc.Streams[0], "/realtime.RealTime/Subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &realTimeSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RealTime_SubscribeClient interface {
	Recv() (*Message, error)
	grpc.ClientStream
}

type realTimeSubscribeClient struct {
	grpc.ClientStream
}

func (x *realTimeSubscribeClient) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RealTimeServer is the server API for RealTime service.
// All implementations must embed UnimplementedRealTimeServer
// for forward compatibility
type RealTimeServer interface {
	Publish(context.Context, *PublishMessage) (*empty.Empty, error)
	Subscribe(*Channel, RealTime_SubscribeServer) error
	mustEmbedUnimplementedRealTimeServer()
}

// UnimplementedRealTimeServer must be embedded to have forward compatible implementations.
type UnimplementedRealTimeServer struct {
}

func (UnimplementedRealTimeServer) Publish(context.Context, *PublishMessage) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Publish not implemented")
}
func (UnimplementedRealTimeServer) Subscribe(*Channel, RealTime_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedRealTimeServer) mustEmbedUnimplementedRealTimeServer() {}

// UnsafeRealTimeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RealTimeServer will
// result in compilation errors.
type UnsafeRealTimeServer interface {
	mustEmbedUnimplementedRealTimeServer()
}

func RegisterRealTimeServer(s grpc.ServiceRegistrar, srv RealTimeServer) {
	s.RegisterService(&RealTime_ServiceDesc, srv)
}

func _RealTime_Publish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RealTimeServer).Publish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/realtime.RealTime/Publish",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RealTimeServer).Publish(ctx, req.(*PublishMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _RealTime_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Channel)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RealTimeServer).Subscribe(m, &realTimeSubscribeServer{stream})
}

type RealTime_SubscribeServer interface {
	Send(*Message) error
	grpc.ServerStream
}

type realTimeSubscribeServer struct {
	grpc.ServerStream
}

func (x *realTimeSubscribeServer) Send(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

// RealTime_ServiceDesc is the grpc.ServiceDesc for RealTime service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RealTime_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "realtime.RealTime",
	HandlerType: (*RealTimeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Publish",
			Handler:    _RealTime_Publish_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Subscribe",
			Handler:       _RealTime_Subscribe_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/proto/realtime.proto",
}
