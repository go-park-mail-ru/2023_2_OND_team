// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package roll

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RollServiceClient is the client API for RollService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RollServiceClient interface {
	FillRoll(ctx context.Context, in *RollAnswers, opts ...grpc.CallOption) (*Nothing, error)
	HasUserFilledRoll(ctx context.Context, in *RollUserData, opts ...grpc.CallOption) (*HasAnswered, error)
	GetHistStat(ctx context.Context, in *HisStatRequest, opts ...grpc.CallOption) (*RollStatHist, error)
}

type rollServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRollServiceClient(cc grpc.ClientConnInterface) RollServiceClient {
	return &rollServiceClient{cc}
}

func (c *rollServiceClient) FillRoll(ctx context.Context, in *RollAnswers, opts ...grpc.CallOption) (*Nothing, error) {
	out := new(Nothing)
	err := c.cc.Invoke(ctx, "/roll.RollService/FillRoll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rollServiceClient) HasUserFilledRoll(ctx context.Context, in *RollUserData, opts ...grpc.CallOption) (*HasAnswered, error) {
	out := new(HasAnswered)
	err := c.cc.Invoke(ctx, "/roll.RollService/HasUserFilledRoll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rollServiceClient) GetHistStat(ctx context.Context, in *HisStatRequest, opts ...grpc.CallOption) (*RollStatHist, error) {
	out := new(RollStatHist)
	err := c.cc.Invoke(ctx, "/roll.RollService/GetHistStat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RollServiceServer is the server API for RollService service.
// All implementations must embed UnimplementedRollServiceServer
// for forward compatibility
type RollServiceServer interface {
	FillRoll(context.Context, *RollAnswers) (*Nothing, error)
	HasUserFilledRoll(context.Context, *RollUserData) (*HasAnswered, error)
	GetHistStat(context.Context, *HisStatRequest) (*RollStatHist, error)
	mustEmbedUnimplementedRollServiceServer()
}

// UnimplementedRollServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRollServiceServer struct {
}

func (UnimplementedRollServiceServer) FillRoll(context.Context, *RollAnswers) (*Nothing, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FillRoll not implemented")
}
func (UnimplementedRollServiceServer) HasUserFilledRoll(context.Context, *RollUserData) (*HasAnswered, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HasUserFilledRoll not implemented")
}
func (UnimplementedRollServiceServer) GetHistStat(context.Context, *HisStatRequest) (*RollStatHist, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHistStat not implemented")
}
func (UnimplementedRollServiceServer) mustEmbedUnimplementedRollServiceServer() {}

// UnsafeRollServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RollServiceServer will
// result in compilation errors.
type UnsafeRollServiceServer interface {
	mustEmbedUnimplementedRollServiceServer()
}

func RegisterRollServiceServer(s grpc.ServiceRegistrar, srv RollServiceServer) {
	s.RegisterService(&RollService_ServiceDesc, srv)
}

func _RollService_FillRoll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RollAnswers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RollServiceServer).FillRoll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/roll.RollService/FillRoll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RollServiceServer).FillRoll(ctx, req.(*RollAnswers))
	}
	return interceptor(ctx, in, info, handler)
}

func _RollService_HasUserFilledRoll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RollUserData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RollServiceServer).HasUserFilledRoll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/roll.RollService/HasUserFilledRoll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RollServiceServer).HasUserFilledRoll(ctx, req.(*RollUserData))
	}
	return interceptor(ctx, in, info, handler)
}

func _RollService_GetHistStat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HisStatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RollServiceServer).GetHistStat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/roll.RollService/GetHistStat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RollServiceServer).GetHistStat(ctx, req.(*HisStatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RollService_ServiceDesc is the grpc.ServiceDesc for RollService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RollService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "roll.RollService",
	HandlerType: (*RollServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FillRoll",
			Handler:    _RollService_FillRoll_Handler,
		},
		{
			MethodName: "HasUserFilledRoll",
			Handler:    _RollService_HasUserFilledRoll_Handler,
		},
		{
			MethodName: "GetHistStat",
			Handler:    _RollService_GetHistStat_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "roll.proto",
}
