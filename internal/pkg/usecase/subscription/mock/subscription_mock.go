// Code generated by MockGen. DO NOT EDIT.
// Source: usecase.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	user "github.com/go-park-mail-ru/2023_2_OND_team/internal/pkg/entity/user"
	gomock "github.com/golang/mock/gomock"
)

// MockUsecase is a mock of Usecase interface.
type MockUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockUsecaseMockRecorder
}

// MockUsecaseMockRecorder is the mock recorder for MockUsecase.
type MockUsecaseMockRecorder struct {
	mock *MockUsecase
}

// NewMockUsecase creates a new mock instance.
func NewMockUsecase(ctrl *gomock.Controller) *MockUsecase {
	mock := &MockUsecase{ctrl: ctrl}
	mock.recorder = &MockUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUsecase) EXPECT() *MockUsecaseMockRecorder {
	return m.recorder
}

// GetSubscriptionInfoForUser mocks base method.
func (m *MockUsecase) GetSubscriptionInfoForUser(ctx context.Context, subOpts *user.SubscriptionOpts) ([]user.SubscriptionUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubscriptionInfoForUser", ctx, subOpts)
	ret0, _ := ret[0].([]user.SubscriptionUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubscriptionInfoForUser indicates an expected call of GetSubscriptionInfoForUser.
func (mr *MockUsecaseMockRecorder) GetSubscriptionInfoForUser(ctx, subOpts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubscriptionInfoForUser", reflect.TypeOf((*MockUsecase)(nil).GetSubscriptionInfoForUser), ctx, subOpts)
}

// SubscribeToUser mocks base method.
func (m *MockUsecase) SubscribeToUser(ctx context.Context, from, to int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubscribeToUser", ctx, from, to)
	ret0, _ := ret[0].(error)
	return ret0
}

// SubscribeToUser indicates an expected call of SubscribeToUser.
func (mr *MockUsecaseMockRecorder) SubscribeToUser(ctx, from, to interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeToUser", reflect.TypeOf((*MockUsecase)(nil).SubscribeToUser), ctx, from, to)
}

// UnsubscribeFromUser mocks base method.
func (m *MockUsecase) UnsubscribeFromUser(ctx context.Context, from, to int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnsubscribeFromUser", ctx, from, to)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnsubscribeFromUser indicates an expected call of UnsubscribeFromUser.
func (mr *MockUsecaseMockRecorder) UnsubscribeFromUser(ctx, from, to interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnsubscribeFromUser", reflect.TypeOf((*MockUsecase)(nil).UnsubscribeFromUser), ctx, from, to)
}
