// Code generated by MockGen. DO NOT EDIT.
// Source: usecase.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	board "github.com/go-park-mail-ru/2023_2_OND_team/internal/pkg/usecase/board/dto"
	gomock "github.com/golang/mock/gomock"
)

// MockUsecase is a mock of Usecase interface.
type MockUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockUsecaseMockRecorder
}

// MockUsecaseMockRecorder is the mock recorder for MockUsecase.
type MockUsecaseMockRecorder struct {
	mock *MockUsecase
}

// NewMockUsecase creates a new mock instance.
func NewMockUsecase(ctrl *gomock.Controller) *MockUsecase {
	mock := &MockUsecase{ctrl: ctrl}
	mock.recorder = &MockUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUsecase) EXPECT() *MockUsecaseMockRecorder {
	return m.recorder
}

// CreateNewBoard mocks base method.
func (m *MockUsecase) CreateNewBoard(ctx context.Context, newBoard board.BoardData) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNewBoard", ctx, newBoard)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNewBoard indicates an expected call of CreateNewBoard.
func (mr *MockUsecaseMockRecorder) CreateNewBoard(ctx, newBoard interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNewBoard", reflect.TypeOf((*MockUsecase)(nil).CreateNewBoard), ctx, newBoard)
}

// DeleteCertainBoard mocks base method.
func (m *MockUsecase) DeleteCertainBoard(ctx context.Context, boardID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCertainBoard", ctx, boardID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCertainBoard indicates an expected call of DeleteCertainBoard.
func (mr *MockUsecaseMockRecorder) DeleteCertainBoard(ctx, boardID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCertainBoard", reflect.TypeOf((*MockUsecase)(nil).DeleteCertainBoard), ctx, boardID)
}

// FixPinsOnBoard mocks base method.
func (m *MockUsecase) FixPinsOnBoard(ctx context.Context, boardID int, pinIds []int, userID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FixPinsOnBoard", ctx, boardID, pinIds, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// FixPinsOnBoard indicates an expected call of FixPinsOnBoard.
func (mr *MockUsecaseMockRecorder) FixPinsOnBoard(ctx, boardID, pinIds, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FixPinsOnBoard", reflect.TypeOf((*MockUsecase)(nil).FixPinsOnBoard), ctx, boardID, pinIds, userID)
}

// GetBoardsByUsername mocks base method.
func (m *MockUsecase) GetBoardsByUsername(ctx context.Context, username string) ([]board.UserBoard, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBoardsByUsername", ctx, username)
	ret0, _ := ret[0].([]board.UserBoard)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBoardsByUsername indicates an expected call of GetBoardsByUsername.
func (mr *MockUsecaseMockRecorder) GetBoardsByUsername(ctx, username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBoardsByUsername", reflect.TypeOf((*MockUsecase)(nil).GetBoardsByUsername), ctx, username)
}

// GetCertainBoard mocks base method.
func (m *MockUsecase) GetCertainBoard(ctx context.Context, boardID int) (board.UserBoard, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCertainBoard", ctx, boardID)
	ret0, _ := ret[0].(board.UserBoard)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCertainBoard indicates an expected call of GetCertainBoard.
func (mr *MockUsecaseMockRecorder) GetCertainBoard(ctx, boardID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCertainBoard", reflect.TypeOf((*MockUsecase)(nil).GetCertainBoard), ctx, boardID)
}

// UpdateBoardInfo mocks base method.
func (m *MockUsecase) UpdateBoardInfo(ctx context.Context, updatedData board.BoardData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBoardInfo", ctx, updatedData)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateBoardInfo indicates an expected call of UpdateBoardInfo.
func (mr *MockUsecaseMockRecorder) UpdateBoardInfo(ctx, updatedData interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBoardInfo", reflect.TypeOf((*MockUsecase)(nil).UpdateBoardInfo), ctx, updatedData)
}
