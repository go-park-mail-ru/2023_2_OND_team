// Code generated by MockGen. DO NOT EDIT.
// Source: manager.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	session "github.com/go-park-mail-ru/2023_2_OND_team/internal/pkg/entity/session"
	gomock "github.com/golang/mock/gomock"
)

// MockSessionManager is a mock of SessionManager interface.
type MockSessionManager struct {
	ctrl     *gomock.Controller
	recorder *MockSessionManagerMockRecorder
}

// MockSessionManagerMockRecorder is the mock recorder for MockSessionManager.
type MockSessionManagerMockRecorder struct {
	mock *MockSessionManager
}

// NewMockSessionManager creates a new mock instance.
func NewMockSessionManager(ctrl *gomock.Controller) *MockSessionManager {
	mock := &MockSessionManager{ctrl: ctrl}
	mock.recorder = &MockSessionManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSessionManager) EXPECT() *MockSessionManagerMockRecorder {
	return m.recorder
}

// CreateNewSessionForUser mocks base method.
func (m *MockSessionManager) CreateNewSessionForUser(ctx context.Context, userID int) (*session.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNewSessionForUser", ctx, userID)
	ret0, _ := ret[0].(*session.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNewSessionForUser indicates an expected call of CreateNewSessionForUser.
func (mr *MockSessionManagerMockRecorder) CreateNewSessionForUser(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNewSessionForUser", reflect.TypeOf((*MockSessionManager)(nil).CreateNewSessionForUser), ctx, userID)
}

// DeleteUserSession mocks base method.
func (m *MockSessionManager) DeleteUserSession(ctx context.Context, key string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserSession", ctx, key)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUserSession indicates an expected call of DeleteUserSession.
func (mr *MockSessionManagerMockRecorder) DeleteUserSession(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserSession", reflect.TypeOf((*MockSessionManager)(nil).DeleteUserSession), ctx, key)
}

// GetUserIDBySessionKey mocks base method.
func (m *MockSessionManager) GetUserIDBySessionKey(ctx context.Context, sessionKey string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserIDBySessionKey", ctx, sessionKey)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserIDBySessionKey indicates an expected call of GetUserIDBySessionKey.
func (mr *MockSessionManagerMockRecorder) GetUserIDBySessionKey(ctx, sessionKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserIDBySessionKey", reflect.TypeOf((*MockSessionManager)(nil).GetUserIDBySessionKey), ctx, sessionKey)
}
