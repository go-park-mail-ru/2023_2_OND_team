// Code generated by MockGen. DO NOT EDIT.
// Source: usecase.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	io "io"
	reflect "reflect"

	pin "github.com/go-park-mail-ru/2023_2_OND_team/internal/pkg/entity/pin"
	pin0 "github.com/go-park-mail-ru/2023_2_OND_team/internal/pkg/usecase/pin"
	gomock "github.com/golang/mock/gomock"
)

// MockUsecase is a mock of Usecase interface.
type MockUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockUsecaseMockRecorder
}

// MockUsecaseMockRecorder is the mock recorder for MockUsecase.
type MockUsecaseMockRecorder struct {
	mock *MockUsecase
}

// NewMockUsecase creates a new mock instance.
func NewMockUsecase(ctrl *gomock.Controller) *MockUsecase {
	mock := &MockUsecase{ctrl: ctrl}
	mock.recorder = &MockUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUsecase) EXPECT() *MockUsecaseMockRecorder {
	return m.recorder
}

// CheckUserHasSetLike mocks base method.
func (m *MockUsecase) CheckUserHasSetLike(ctx context.Context, pinID, userID int) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckUserHasSetLike", ctx, pinID, userID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckUserHasSetLike indicates an expected call of CheckUserHasSetLike.
func (mr *MockUsecaseMockRecorder) CheckUserHasSetLike(ctx, pinID, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckUserHasSetLike", reflect.TypeOf((*MockUsecase)(nil).CheckUserHasSetLike), ctx, pinID, userID)
}

// CreateNewPin mocks base method.
func (m *MockUsecase) CreateNewPin(ctx context.Context, pin *pin.Pin, mimeTypePicture string, sizePicture int64, picture io.Reader) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNewPin", ctx, pin, mimeTypePicture, sizePicture, picture)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateNewPin indicates an expected call of CreateNewPin.
func (mr *MockUsecaseMockRecorder) CreateNewPin(ctx, pin, mimeTypePicture, sizePicture, picture interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNewPin", reflect.TypeOf((*MockUsecase)(nil).CreateNewPin), ctx, pin, mimeTypePicture, sizePicture, picture)
}

// DeleteLikeFromUser mocks base method.
func (m *MockUsecase) DeleteLikeFromUser(ctx context.Context, pinID, userID int) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLikeFromUser", ctx, pinID, userID)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteLikeFromUser indicates an expected call of DeleteLikeFromUser.
func (mr *MockUsecaseMockRecorder) DeleteLikeFromUser(ctx, pinID, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLikeFromUser", reflect.TypeOf((*MockUsecase)(nil).DeleteLikeFromUser), ctx, pinID, userID)
}

// DeletePinFromUser mocks base method.
func (m *MockUsecase) DeletePinFromUser(ctx context.Context, pinID, userID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePinFromUser", ctx, pinID, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePinFromUser indicates an expected call of DeletePinFromUser.
func (mr *MockUsecaseMockRecorder) DeletePinFromUser(ctx, pinID, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePinFromUser", reflect.TypeOf((*MockUsecase)(nil).DeletePinFromUser), ctx, pinID, userID)
}

// EditPinByID mocks base method.
func (m *MockUsecase) EditPinByID(ctx context.Context, pinID, userID int, updateData *pin0.PinUpdateData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditPinByID", ctx, pinID, userID, updateData)
	ret0, _ := ret[0].(error)
	return ret0
}

// EditPinByID indicates an expected call of EditPinByID.
func (mr *MockUsecaseMockRecorder) EditPinByID(ctx, pinID, userID, updateData interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditPinByID", reflect.TypeOf((*MockUsecase)(nil).EditPinByID), ctx, pinID, userID, updateData)
}

// IsAvailableBatchPinForFixOnBoard mocks base method.
func (m *MockUsecase) IsAvailableBatchPinForFixOnBoard(ctx context.Context, pinID []int, userID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsAvailableBatchPinForFixOnBoard", ctx, pinID, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// IsAvailableBatchPinForFixOnBoard indicates an expected call of IsAvailableBatchPinForFixOnBoard.
func (mr *MockUsecaseMockRecorder) IsAvailableBatchPinForFixOnBoard(ctx, pinID, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsAvailableBatchPinForFixOnBoard", reflect.TypeOf((*MockUsecase)(nil).IsAvailableBatchPinForFixOnBoard), ctx, pinID, userID)
}

// IsAvailablePinForFixOnBoard mocks base method.
func (m *MockUsecase) IsAvailablePinForFixOnBoard(ctx context.Context, pinID, userID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsAvailablePinForFixOnBoard", ctx, pinID, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// IsAvailablePinForFixOnBoard indicates an expected call of IsAvailablePinForFixOnBoard.
func (mr *MockUsecaseMockRecorder) IsAvailablePinForFixOnBoard(ctx, pinID, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsAvailablePinForFixOnBoard", reflect.TypeOf((*MockUsecase)(nil).IsAvailablePinForFixOnBoard), ctx, pinID, userID)
}

// SelectNewPins mocks base method.
func (m *MockUsecase) SelectNewPins(ctx context.Context, count, minID, maxID int) ([]pin.Pin, int, int) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectNewPins", ctx, count, minID, maxID)
	ret0, _ := ret[0].([]pin.Pin)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(int)
	return ret0, ret1, ret2
}

// SelectNewPins indicates an expected call of SelectNewPins.
func (mr *MockUsecaseMockRecorder) SelectNewPins(ctx, count, minID, maxID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectNewPins", reflect.TypeOf((*MockUsecase)(nil).SelectNewPins), ctx, count, minID, maxID)
}

// SelectUserPins mocks base method.
func (m *MockUsecase) SelectUserPins(ctx context.Context, userID, count, minID, maxID int) ([]pin.Pin, int, int) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectUserPins", ctx, userID, count, minID, maxID)
	ret0, _ := ret[0].([]pin.Pin)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(int)
	return ret0, ret1, ret2
}

// SelectUserPins indicates an expected call of SelectUserPins.
func (mr *MockUsecaseMockRecorder) SelectUserPins(ctx, userID, count, minID, maxID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectUserPins", reflect.TypeOf((*MockUsecase)(nil).SelectUserPins), ctx, userID, count, minID, maxID)
}

// SetLikeFromUser mocks base method.
func (m *MockUsecase) SetLikeFromUser(ctx context.Context, pinID, userID int) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetLikeFromUser", ctx, pinID, userID)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetLikeFromUser indicates an expected call of SetLikeFromUser.
func (mr *MockUsecaseMockRecorder) SetLikeFromUser(ctx, pinID, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetLikeFromUser", reflect.TypeOf((*MockUsecase)(nil).SetLikeFromUser), ctx, pinID, userID)
}

// ViewAnPin mocks base method.
func (m *MockUsecase) ViewAnPin(ctx context.Context, pinID, userID int) (*pin.Pin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ViewAnPin", ctx, pinID, userID)
	ret0, _ := ret[0].(*pin.Pin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ViewAnPin indicates an expected call of ViewAnPin.
func (mr *MockUsecaseMockRecorder) ViewAnPin(ctx, pinID, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ViewAnPin", reflect.TypeOf((*MockUsecase)(nil).ViewAnPin), ctx, pinID, userID)
}
