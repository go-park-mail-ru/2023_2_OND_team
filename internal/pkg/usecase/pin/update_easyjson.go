// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package pin

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson2d86586fDecodeGithubComGoParkMailRu20232ONDTeamInternalPkgUsecasePin(in *jlexer.Lexer, out *PinUpdateData) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "title":
			if in.IsNull() {
				in.Skip()
				out.Title = nil
			} else {
				if out.Title == nil {
					out.Title = new(string)
				}
				*out.Title = string(in.String())
			}
		case "description":
			if in.IsNull() {
				in.Skip()
				out.Description = nil
			} else {
				if out.Description == nil {
					out.Description = new(string)
				}
				*out.Description = string(in.String())
			}
		case "public":
			if in.IsNull() {
				in.Skip()
				out.Public = nil
			} else {
				if out.Public == nil {
					out.Public = new(bool)
				}
				*out.Public = bool(in.Bool())
			}
		case "tags":
			if in.IsNull() {
				in.Skip()
				out.Tags = nil
			} else {
				in.Delim('[')
				if out.Tags == nil {
					if !in.IsDelim(']') {
						out.Tags = make([]string, 0, 4)
					} else {
						out.Tags = []string{}
					}
				} else {
					out.Tags = (out.Tags)[:0]
				}
				for !in.IsDelim(']') {
					var v1 string
					v1 = string(in.String())
					out.Tags = append(out.Tags, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2d86586fEncodeGithubComGoParkMailRu20232ONDTeamInternalPkgUsecasePin(out *jwriter.Writer, in PinUpdateData) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"title\":"
		out.RawString(prefix[1:])
		if in.Title == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Title))
		}
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		if in.Description == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Description))
		}
	}
	{
		const prefix string = ",\"public\":"
		out.RawString(prefix)
		if in.Public == nil {
			out.RawString("null")
		} else {
			out.Bool(bool(*in.Public))
		}
	}
	{
		const prefix string = ",\"tags\":"
		out.RawString(prefix)
		if in.Tags == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.Tags {
				if v2 > 0 {
					out.RawByte(',')
				}
				out.String(string(v3))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PinUpdateData) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2d86586fEncodeGithubComGoParkMailRu20232ONDTeamInternalPkgUsecasePin(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PinUpdateData) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2d86586fEncodeGithubComGoParkMailRu20232ONDTeamInternalPkgUsecasePin(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PinUpdateData) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2d86586fDecodeGithubComGoParkMailRu20232ONDTeamInternalPkgUsecasePin(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PinUpdateData) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2d86586fDecodeGithubComGoParkMailRu20232ONDTeamInternalPkgUsecasePin(l, v)
}
