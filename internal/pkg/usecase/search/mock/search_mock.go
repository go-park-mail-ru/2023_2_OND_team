// Code generated by MockGen. DO NOT EDIT.
// Source: usecase.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	search "github.com/go-park-mail-ru/2023_2_OND_team/internal/pkg/entity/search"
	gomock "github.com/golang/mock/gomock"
)

// MockUsecase is a mock of Usecase interface.
type MockUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockUsecaseMockRecorder
}

// MockUsecaseMockRecorder is the mock recorder for MockUsecase.
type MockUsecaseMockRecorder struct {
	mock *MockUsecase
}

// NewMockUsecase creates a new mock instance.
func NewMockUsecase(ctrl *gomock.Controller) *MockUsecase {
	mock := &MockUsecase{ctrl: ctrl}
	mock.recorder = &MockUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUsecase) EXPECT() *MockUsecaseMockRecorder {
	return m.recorder
}

// GetBoards mocks base method.
func (m *MockUsecase) GetBoards(ctx context.Context, opts *search.SearchOpts) ([]search.BoardForSearch, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBoards", ctx, opts)
	ret0, _ := ret[0].([]search.BoardForSearch)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBoards indicates an expected call of GetBoards.
func (mr *MockUsecaseMockRecorder) GetBoards(ctx, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBoards", reflect.TypeOf((*MockUsecase)(nil).GetBoards), ctx, opts)
}

// GetPins mocks base method.
func (m *MockUsecase) GetPins(ctx context.Context, opts *search.SearchOpts) ([]search.PinForSearch, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPins", ctx, opts)
	ret0, _ := ret[0].([]search.PinForSearch)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPins indicates an expected call of GetPins.
func (mr *MockUsecaseMockRecorder) GetPins(ctx, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPins", reflect.TypeOf((*MockUsecase)(nil).GetPins), ctx, opts)
}

// GetUsers mocks base method.
func (m *MockUsecase) GetUsers(ctx context.Context, opts *search.SearchOpts) ([]search.UserForSearch, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsers", ctx, opts)
	ret0, _ := ret[0].([]search.UserForSearch)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsers indicates an expected call of GetUsers.
func (mr *MockUsecaseMockRecorder) GetUsers(ctx, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsers", reflect.TypeOf((*MockUsecase)(nil).GetUsers), ctx, opts)
}
