// Code generated by MockGen. DO NOT EDIT.
// Source: internal/pkg/repository/board/repo.go

// Package mock_board is a generated GoMock package.
package mock_board

import (
	context "context"
	reflect "reflect"

	board "github.com/go-park-mail-ru/2023_2_OND_team/internal/pkg/entity/board"
	user "github.com/go-park-mail-ru/2023_2_OND_team/internal/pkg/entity/user"
	dto "github.com/go-park-mail-ru/2023_2_OND_team/internal/pkg/usecase/board/dto"
	gomock "github.com/golang/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// CreateBoard mocks base method.
func (m *MockRepository) CreateBoard(ctx context.Context, board board.Board, tagTitles []string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBoard", ctx, board, tagTitles)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBoard indicates an expected call of CreateBoard.
func (mr *MockRepositoryMockRecorder) CreateBoard(ctx, board, tagTitles interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBoard", reflect.TypeOf((*MockRepository)(nil).CreateBoard), ctx, board, tagTitles)
}

// DeleteBoardByID mocks base method.
func (m *MockRepository) DeleteBoardByID(ctx context.Context, boardID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBoardByID", ctx, boardID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteBoardByID indicates an expected call of DeleteBoardByID.
func (mr *MockRepositoryMockRecorder) DeleteBoardByID(ctx, boardID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBoardByID", reflect.TypeOf((*MockRepository)(nil).DeleteBoardByID), ctx, boardID)
}

// GetBoardAuthorByBoardID mocks base method.
func (m *MockRepository) GetBoardAuthorByBoardID(ctx context.Context, boardID int) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBoardAuthorByBoardID", ctx, boardID)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBoardAuthorByBoardID indicates an expected call of GetBoardAuthorByBoardID.
func (mr *MockRepositoryMockRecorder) GetBoardAuthorByBoardID(ctx, boardID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBoardAuthorByBoardID", reflect.TypeOf((*MockRepository)(nil).GetBoardAuthorByBoardID), ctx, boardID)
}

// GetBoardByID mocks base method.
func (m *MockRepository) GetBoardByID(ctx context.Context, boardID int, hasAccess bool) (dto.UserBoard, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBoardByID", ctx, boardID, hasAccess)
	ret0, _ := ret[0].(dto.UserBoard)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBoardByID indicates an expected call of GetBoardByID.
func (mr *MockRepositoryMockRecorder) GetBoardByID(ctx, boardID, hasAccess interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBoardByID", reflect.TypeOf((*MockRepository)(nil).GetBoardByID), ctx, boardID, hasAccess)
}

// GetBoardsByUserID mocks base method.
func (m *MockRepository) GetBoardsByUserID(ctx context.Context, userID int, isAuthor bool, accessableBoardsIDs []int) ([]dto.UserBoard, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBoardsByUserID", ctx, userID, isAuthor, accessableBoardsIDs)
	ret0, _ := ret[0].([]dto.UserBoard)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBoardsByUserID indicates an expected call of GetBoardsByUserID.
func (mr *MockRepositoryMockRecorder) GetBoardsByUserID(ctx, userID, isAuthor, accessableBoardsIDs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBoardsByUserID", reflect.TypeOf((*MockRepository)(nil).GetBoardsByUserID), ctx, userID, isAuthor, accessableBoardsIDs)
}

// GetContributorBoardsIDs mocks base method.
func (m *MockRepository) GetContributorBoardsIDs(ctx context.Context, contributorID int) ([]int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContributorBoardsIDs", ctx, contributorID)
	ret0, _ := ret[0].([]int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContributorBoardsIDs indicates an expected call of GetContributorBoardsIDs.
func (mr *MockRepositoryMockRecorder) GetContributorBoardsIDs(ctx, contributorID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContributorBoardsIDs", reflect.TypeOf((*MockRepository)(nil).GetContributorBoardsIDs), ctx, contributorID)
}

// GetContributorsByBoardID mocks base method.
func (m *MockRepository) GetContributorsByBoardID(ctx context.Context, boardID int) ([]user.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContributorsByBoardID", ctx, boardID)
	ret0, _ := ret[0].([]user.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContributorsByBoardID indicates an expected call of GetContributorsByBoardID.
func (mr *MockRepositoryMockRecorder) GetContributorsByBoardID(ctx, boardID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContributorsByBoardID", reflect.TypeOf((*MockRepository)(nil).GetContributorsByBoardID), ctx, boardID)
}

// UpdateBoard mocks base method.
func (m *MockRepository) UpdateBoard(ctx context.Context, newBoardData board.Board, tagTitles []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBoard", ctx, newBoardData, tagTitles)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateBoard indicates an expected call of UpdateBoard.
func (mr *MockRepositoryMockRecorder) UpdateBoard(ctx, newBoardData, tagTitles interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBoard", reflect.TypeOf((*MockRepository)(nil).UpdateBoard), ctx, newBoardData, tagTitles)
}
