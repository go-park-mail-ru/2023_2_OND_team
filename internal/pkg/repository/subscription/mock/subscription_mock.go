// Code generated by MockGen. DO NOT EDIT.
// Source: repo.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	user "github.com/go-park-mail-ru/2023_2_OND_team/internal/pkg/entity/user"
	gomock "github.com/golang/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// CreateSubscriptionUser mocks base method.
func (m *MockRepository) CreateSubscriptionUser(ctx context.Context, from, to int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSubscriptionUser", ctx, from, to)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateSubscriptionUser indicates an expected call of CreateSubscriptionUser.
func (mr *MockRepositoryMockRecorder) CreateSubscriptionUser(ctx, from, to interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSubscriptionUser", reflect.TypeOf((*MockRepository)(nil).CreateSubscriptionUser), ctx, from, to)
}

// DeleteSubscriptionUser mocks base method.
func (m *MockRepository) DeleteSubscriptionUser(ctx context.Context, from, to int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSubscriptionUser", ctx, from, to)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSubscriptionUser indicates an expected call of DeleteSubscriptionUser.
func (mr *MockRepositoryMockRecorder) DeleteSubscriptionUser(ctx, from, to interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSubscriptionUser", reflect.TypeOf((*MockRepository)(nil).DeleteSubscriptionUser), ctx, from, to)
}

// GetUserSubscribers mocks base method.
func (m *MockRepository) GetUserSubscribers(ctx context.Context, userID, count, lastID, currUserID int) ([]user.SubscriptionUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserSubscribers", ctx, userID, count, lastID, currUserID)
	ret0, _ := ret[0].([]user.SubscriptionUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserSubscribers indicates an expected call of GetUserSubscribers.
func (mr *MockRepositoryMockRecorder) GetUserSubscribers(ctx, userID, count, lastID, currUserID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserSubscribers", reflect.TypeOf((*MockRepository)(nil).GetUserSubscribers), ctx, userID, count, lastID, currUserID)
}

// GetUserSubscriptions mocks base method.
func (m *MockRepository) GetUserSubscriptions(ctx context.Context, userID, count, lastID, currUserID int) ([]user.SubscriptionUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserSubscriptions", ctx, userID, count, lastID, currUserID)
	ret0, _ := ret[0].([]user.SubscriptionUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserSubscriptions indicates an expected call of GetUserSubscriptions.
func (mr *MockRepositoryMockRecorder) GetUserSubscriptions(ctx, userID, count, lastID, currUserID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserSubscriptions", reflect.TypeOf((*MockRepository)(nil).GetUserSubscriptions), ctx, userID, count, lastID, currUserID)
}
