// Code generated by MockGen. DO NOT EDIT.
// Source: repo.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	pin "github.com/go-park-mail-ru/2023_2_OND_team/internal/pkg/entity/pin"
	user "github.com/go-park-mail-ru/2023_2_OND_team/internal/pkg/entity/user"
	pin0 "github.com/go-park-mail-ru/2023_2_OND_team/internal/pkg/repository/pin"
	gomock "github.com/golang/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// AddNewPin mocks base method.
func (m *MockRepository) AddNewPin(ctx context.Context, pin *pin.Pin) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddNewPin", ctx, pin)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddNewPin indicates an expected call of AddNewPin.
func (mr *MockRepositoryMockRecorder) AddNewPin(ctx, pin interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddNewPin", reflect.TypeOf((*MockRepository)(nil).AddNewPin), ctx, pin)
}

// DelLike mocks base method.
func (m *MockRepository) DelLike(ctx context.Context, pinID, userID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DelLike", ctx, pinID, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DelLike indicates an expected call of DelLike.
func (mr *MockRepositoryMockRecorder) DelLike(ctx, pinID, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DelLike", reflect.TypeOf((*MockRepository)(nil).DelLike), ctx, pinID, userID)
}

// DeletePin mocks base method.
func (m *MockRepository) DeletePin(ctx context.Context, pinID, userID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePin", ctx, pinID, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePin indicates an expected call of DeletePin.
func (mr *MockRepositoryMockRecorder) DeletePin(ctx, pinID, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePin", reflect.TypeOf((*MockRepository)(nil).DeletePin), ctx, pinID, userID)
}

// EditPin mocks base method.
func (m *MockRepository) EditPin(ctx context.Context, pinID int, updateData pin0.S, titleTags []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditPin", ctx, pinID, updateData, titleTags)
	ret0, _ := ret[0].(error)
	return ret0
}

// EditPin indicates an expected call of EditPin.
func (mr *MockRepositoryMockRecorder) EditPin(ctx, pinID, updateData, titleTags interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditPin", reflect.TypeOf((*MockRepository)(nil).EditPin), ctx, pinID, updateData, titleTags)
}

// GetAuthorPin mocks base method.
func (m *MockRepository) GetAuthorPin(ctx context.Context, pinID int) (*user.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuthorPin", ctx, pinID)
	ret0, _ := ret[0].(*user.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAuthorPin indicates an expected call of GetAuthorPin.
func (mr *MockRepositoryMockRecorder) GetAuthorPin(ctx, pinID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthorPin", reflect.TypeOf((*MockRepository)(nil).GetAuthorPin), ctx, pinID)
}

// GetBatchPinByID mocks base method.
func (m *MockRepository) GetBatchPinByID(ctx context.Context, pinID []int) ([]pin.Pin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBatchPinByID", ctx, pinID)
	ret0, _ := ret[0].([]pin.Pin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBatchPinByID indicates an expected call of GetBatchPinByID.
func (mr *MockRepositoryMockRecorder) GetBatchPinByID(ctx, pinID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBatchPinByID", reflect.TypeOf((*MockRepository)(nil).GetBatchPinByID), ctx, pinID)
}

// GetCountLikeByPinID mocks base method.
func (m *MockRepository) GetCountLikeByPinID(ctx context.Context, pinID int) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCountLikeByPinID", ctx, pinID)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCountLikeByPinID indicates an expected call of GetCountLikeByPinID.
func (mr *MockRepositoryMockRecorder) GetCountLikeByPinID(ctx, pinID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCountLikeByPinID", reflect.TypeOf((*MockRepository)(nil).GetCountLikeByPinID), ctx, pinID)
}

// GetPinByID mocks base method.
func (m *MockRepository) GetPinByID(ctx context.Context, pinID int, revealAuthor bool) (*pin.Pin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPinByID", ctx, pinID, revealAuthor)
	ret0, _ := ret[0].(*pin.Pin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPinByID indicates an expected call of GetPinByID.
func (mr *MockRepositoryMockRecorder) GetPinByID(ctx, pinID, revealAuthor interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPinByID", reflect.TypeOf((*MockRepository)(nil).GetPinByID), ctx, pinID, revealAuthor)
}

// GetSortedNewNPins mocks base method.
func (m *MockRepository) GetSortedNewNPins(ctx context.Context, count, midID, maxID int) ([]pin.Pin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSortedNewNPins", ctx, count, midID, maxID)
	ret0, _ := ret[0].([]pin.Pin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSortedNewNPins indicates an expected call of GetSortedNewNPins.
func (mr *MockRepositoryMockRecorder) GetSortedNewNPins(ctx, count, midID, maxID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSortedNewNPins", reflect.TypeOf((*MockRepository)(nil).GetSortedNewNPins), ctx, count, midID, maxID)
}

// GetSortedUserPins mocks base method.
func (m *MockRepository) GetSortedUserPins(ctx context.Context, userID, count, minID, maxID int) ([]pin.Pin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSortedUserPins", ctx, userID, count, minID, maxID)
	ret0, _ := ret[0].([]pin.Pin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSortedUserPins indicates an expected call of GetSortedUserPins.
func (mr *MockRepositoryMockRecorder) GetSortedUserPins(ctx, userID, count, minID, maxID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSortedUserPins", reflect.TypeOf((*MockRepository)(nil).GetSortedUserPins), ctx, userID, count, minID, maxID)
}

// GetTagsByPinID mocks base method.
func (m *MockRepository) GetTagsByPinID(ctx context.Context, pinID int) ([]pin.Tag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTagsByPinID", ctx, pinID)
	ret0, _ := ret[0].([]pin.Tag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTagsByPinID indicates an expected call of GetTagsByPinID.
func (mr *MockRepositoryMockRecorder) GetTagsByPinID(ctx, pinID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTagsByPinID", reflect.TypeOf((*MockRepository)(nil).GetTagsByPinID), ctx, pinID)
}

// IsAvailableToUserAsContributorBoard mocks base method.
func (m *MockRepository) IsAvailableToUserAsContributorBoard(ctx context.Context, pinID, userID int) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsAvailableToUserAsContributorBoard", ctx, pinID, userID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsAvailableToUserAsContributorBoard indicates an expected call of IsAvailableToUserAsContributorBoard.
func (mr *MockRepositoryMockRecorder) IsAvailableToUserAsContributorBoard(ctx, pinID, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsAvailableToUserAsContributorBoard", reflect.TypeOf((*MockRepository)(nil).IsAvailableToUserAsContributorBoard), ctx, pinID, userID)
}

// IsSetLike mocks base method.
func (m *MockRepository) IsSetLike(ctx context.Context, pinID, userID int) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsSetLike", ctx, pinID, userID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsSetLike indicates an expected call of IsSetLike.
func (mr *MockRepositoryMockRecorder) IsSetLike(ctx, pinID, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsSetLike", reflect.TypeOf((*MockRepository)(nil).IsSetLike), ctx, pinID, userID)
}

// SetLike mocks base method.
func (m *MockRepository) SetLike(ctx context.Context, pinID, userID int) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetLike", ctx, pinID, userID)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetLike indicates an expected call of SetLike.
func (mr *MockRepositoryMockRecorder) SetLike(ctx, pinID, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetLike", reflect.TypeOf((*MockRepository)(nil).SetLike), ctx, pinID, userID)
}
