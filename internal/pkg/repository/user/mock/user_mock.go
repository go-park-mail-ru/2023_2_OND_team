// Code generated by MockGen. DO NOT EDIT.
// Source: repo.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	user "github.com/go-park-mail-ru/2023_2_OND_team/internal/pkg/entity/user"
	user0 "github.com/go-park-mail-ru/2023_2_OND_team/internal/pkg/repository/user"
	gomock "github.com/golang/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// AddNewUser mocks base method.
func (m *MockRepository) AddNewUser(ctx context.Context, user *user.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddNewUser", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddNewUser indicates an expected call of AddNewUser.
func (mr *MockRepositoryMockRecorder) AddNewUser(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddNewUser", reflect.TypeOf((*MockRepository)(nil).AddNewUser), ctx, user)
}

// CheckUserExistence mocks base method.
func (m *MockRepository) CheckUserExistence(ctx context.Context, userID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckUserExistence", ctx, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckUserExistence indicates an expected call of CheckUserExistence.
func (mr *MockRepositoryMockRecorder) CheckUserExistence(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckUserExistence", reflect.TypeOf((*MockRepository)(nil).CheckUserExistence), ctx, userID)
}

// EditUserAvatar mocks base method.
func (m *MockRepository) EditUserAvatar(ctx context.Context, userID int, avatar string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditUserAvatar", ctx, userID, avatar)
	ret0, _ := ret[0].(error)
	return ret0
}

// EditUserAvatar indicates an expected call of EditUserAvatar.
func (mr *MockRepositoryMockRecorder) EditUserAvatar(ctx, userID, avatar interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditUserAvatar", reflect.TypeOf((*MockRepository)(nil).EditUserAvatar), ctx, userID, avatar)
}

// EditUserInfo mocks base method.
func (m *MockRepository) EditUserInfo(ctx context.Context, userID int, updateFields user0.S) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditUserInfo", ctx, userID, updateFields)
	ret0, _ := ret[0].(error)
	return ret0
}

// EditUserInfo indicates an expected call of EditUserInfo.
func (mr *MockRepositoryMockRecorder) EditUserInfo(ctx, userID, updateFields interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditUserInfo", reflect.TypeOf((*MockRepository)(nil).EditUserInfo), ctx, userID, updateFields)
}

// GetAllUserData mocks base method.
func (m *MockRepository) GetAllUserData(ctx context.Context, userID int) (*user.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllUserData", ctx, userID)
	ret0, _ := ret[0].(*user.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllUserData indicates an expected call of GetAllUserData.
func (mr *MockRepositoryMockRecorder) GetAllUserData(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllUserData", reflect.TypeOf((*MockRepository)(nil).GetAllUserData), ctx, userID)
}

// GetProfileData mocks base method.
func (m *MockRepository) GetProfileData(ctx context.Context, userID int) (*user.User, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProfileData", ctx, userID)
	ret0, _ := ret[0].(*user.User)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetProfileData indicates an expected call of GetProfileData.
func (mr *MockRepositoryMockRecorder) GetProfileData(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProfileData", reflect.TypeOf((*MockRepository)(nil).GetProfileData), ctx, userID)
}

// GetUserByUsername mocks base method.
func (m *MockRepository) GetUserByUsername(ctx context.Context, username string) (*user.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByUsername", ctx, username)
	ret0, _ := ret[0].(*user.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByUsername indicates an expected call of GetUserByUsername.
func (mr *MockRepositoryMockRecorder) GetUserByUsername(ctx, username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByUsername", reflect.TypeOf((*MockRepository)(nil).GetUserByUsername), ctx, username)
}

// GetUserData mocks base method.
func (m *MockRepository) GetUserData(ctx context.Context, userID, currUserID int) (*user.User, bool, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserData", ctx, userID, currUserID)
	ret0, _ := ret[0].(*user.User)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(int)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// GetUserData indicates an expected call of GetUserData.
func (mr *MockRepositoryMockRecorder) GetUserData(ctx, userID, currUserID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserData", reflect.TypeOf((*MockRepository)(nil).GetUserData), ctx, userID, currUserID)
}

// GetUserIdByUsername mocks base method.
func (m *MockRepository) GetUserIdByUsername(ctx context.Context, username string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserIdByUsername", ctx, username)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserIdByUsername indicates an expected call of GetUserIdByUsername.
func (mr *MockRepositoryMockRecorder) GetUserIdByUsername(ctx, username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserIdByUsername", reflect.TypeOf((*MockRepository)(nil).GetUserIdByUsername), ctx, username)
}

// GetUsernameAndAvatarByID mocks base method.
func (m *MockRepository) GetUsernameAndAvatarByID(ctx context.Context, userID int) (string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsernameAndAvatarByID", ctx, userID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetUsernameAndAvatarByID indicates an expected call of GetUsernameAndAvatarByID.
func (mr *MockRepositoryMockRecorder) GetUsernameAndAvatarByID(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsernameAndAvatarByID", reflect.TypeOf((*MockRepository)(nil).GetUsernameAndAvatarByID), ctx, userID)
}
