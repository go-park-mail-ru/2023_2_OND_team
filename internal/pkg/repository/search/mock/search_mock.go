// Code generated by MockGen. DO NOT EDIT.
// Source: repo.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	search "github.com/go-park-mail-ru/2023_2_OND_team/internal/pkg/entity/search"
	gomock "github.com/golang/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// GetFilteredBoards mocks base method.
func (m *MockRepository) GetFilteredBoards(ctx context.Context, opts *search.SearchOpts) ([]search.BoardForSearch, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFilteredBoards", ctx, opts)
	ret0, _ := ret[0].([]search.BoardForSearch)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFilteredBoards indicates an expected call of GetFilteredBoards.
func (mr *MockRepositoryMockRecorder) GetFilteredBoards(ctx, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFilteredBoards", reflect.TypeOf((*MockRepository)(nil).GetFilteredBoards), ctx, opts)
}

// GetFilteredPins mocks base method.
func (m *MockRepository) GetFilteredPins(ctx context.Context, opts *search.SearchOpts) ([]search.PinForSearch, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFilteredPins", ctx, opts)
	ret0, _ := ret[0].([]search.PinForSearch)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFilteredPins indicates an expected call of GetFilteredPins.
func (mr *MockRepositoryMockRecorder) GetFilteredPins(ctx, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFilteredPins", reflect.TypeOf((*MockRepository)(nil).GetFilteredPins), ctx, opts)
}

// GetFilteredUsers mocks base method.
func (m *MockRepository) GetFilteredUsers(ctx context.Context, opts *search.SearchOpts) ([]search.UserForSearch, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFilteredUsers", ctx, opts)
	ret0, _ := ret[0].([]search.UserForSearch)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFilteredUsers indicates an expected call of GetFilteredUsers.
func (mr *MockRepositoryMockRecorder) GetFilteredUsers(ctx, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFilteredUsers", reflect.TypeOf((*MockRepository)(nil).GetFilteredUsers), ctx, opts)
}
