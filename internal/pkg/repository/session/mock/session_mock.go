// Code generated by MockGen. DO NOT EDIT.
// Source: repo.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	session "github.com/go-park-mail-ru/2023_2_OND_team/internal/pkg/entity/session"
	gomock "github.com/golang/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// AddSession mocks base method.
func (m *MockRepository) AddSession(ctx context.Context, session *session.Session) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddSession", ctx, session)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddSession indicates an expected call of AddSession.
func (mr *MockRepositoryMockRecorder) AddSession(ctx, session interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSession", reflect.TypeOf((*MockRepository)(nil).AddSession), ctx, session)
}

// DeleteAllSessionForUser mocks base method.
func (m *MockRepository) DeleteAllSessionForUser(ctx context.Context, userID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAllSessionForUser", ctx, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllSessionForUser indicates an expected call of DeleteAllSessionForUser.
func (mr *MockRepositoryMockRecorder) DeleteAllSessionForUser(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllSessionForUser", reflect.TypeOf((*MockRepository)(nil).DeleteAllSessionForUser), ctx, userID)
}

// DeleteSessionByKey mocks base method.
func (m *MockRepository) DeleteSessionByKey(ctx context.Context, key string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSessionByKey", ctx, key)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSessionByKey indicates an expected call of DeleteSessionByKey.
func (mr *MockRepositoryMockRecorder) DeleteSessionByKey(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSessionByKey", reflect.TypeOf((*MockRepository)(nil).DeleteSessionByKey), ctx, key)
}

// GetSessionByKey mocks base method.
func (m *MockRepository) GetSessionByKey(ctx context.Context, key string) (*session.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSessionByKey", ctx, key)
	ret0, _ := ret[0].(*session.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSessionByKey indicates an expected call of GetSessionByKey.
func (mr *MockRepositoryMockRecorder) GetSessionByKey(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSessionByKey", reflect.TypeOf((*MockRepository)(nil).GetSessionByKey), ctx, key)
}
