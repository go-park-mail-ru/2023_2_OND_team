// Code generated by MockGen. DO NOT EDIT.
// Source: repo.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	message "github.com/go-park-mail-ru/2023_2_OND_team/internal/pkg/entity/message"
	gomock "github.com/golang/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// AddNewMessage mocks base method.
func (m *MockRepository) AddNewMessage(ctx context.Context, mes *message.Message) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddNewMessage", ctx, mes)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddNewMessage indicates an expected call of AddNewMessage.
func (mr *MockRepositoryMockRecorder) AddNewMessage(ctx, mes interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddNewMessage", reflect.TypeOf((*MockRepository)(nil).AddNewMessage), ctx, mes)
}

// DelMessage mocks base method.
func (m *MockRepository) DelMessage(ctx context.Context, messageID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DelMessage", ctx, messageID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DelMessage indicates an expected call of DelMessage.
func (mr *MockRepositoryMockRecorder) DelMessage(ctx, messageID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DelMessage", reflect.TypeOf((*MockRepository)(nil).DelMessage), ctx, messageID)
}

// GetMessageByID mocks base method.
func (m *MockRepository) GetMessageByID(ctx context.Context, mesID int) (*message.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMessageByID", ctx, mesID)
	ret0, _ := ret[0].(*message.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMessageByID indicates an expected call of GetMessageByID.
func (mr *MockRepositoryMockRecorder) GetMessageByID(ctx, mesID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMessageByID", reflect.TypeOf((*MockRepository)(nil).GetMessageByID), ctx, mesID)
}

// GetMessages mocks base method.
func (m *MockRepository) GetMessages(ctx context.Context, chat message.Chat, count, lastID int) ([]message.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMessages", ctx, chat, count, lastID)
	ret0, _ := ret[0].([]message.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMessages indicates an expected call of GetMessages.
func (mr *MockRepositoryMockRecorder) GetMessages(ctx, chat, count, lastID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMessages", reflect.TypeOf((*MockRepository)(nil).GetMessages), ctx, chat, count, lastID)
}

// UpdateContentMessage mocks base method.
func (m *MockRepository) UpdateContentMessage(ctx context.Context, messageID int, newContent string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateContentMessage", ctx, messageID, newContent)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateContentMessage indicates an expected call of UpdateContentMessage.
func (mr *MockRepositoryMockRecorder) UpdateContentMessage(ctx, messageID, newContent interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateContentMessage", reflect.TypeOf((*MockRepository)(nil).UpdateContentMessage), ctx, messageID, newContent)
}
